#### DJ action

function find_dicer() {
    amidi -l | awk '/Dicer/ {print $2}'
}

# function xwax() {
#     cd $HOME/xwax_playlists/playlists
#     PLAYLISTS=$(ls -1 | sed -e 's/\(.*\)/-l \0 /')
#     DICER=$(find_dicer)
#     XWAX=$HOME/code/xwax/xwax
#     $XWAX -g /1.4 --dicer $DICER -s /bin/cat -i $HOME/code/xwax/import \
#         -m 4 -a plughw:Audio4DJ,0,0 -a plughw:Audio4DJ,0,1 \
#         $PLAYLISTS
# }
alias xwax="$HOME/code/xwax/xwax -g /1.4 --dicer $(find_dicer) -s /bin/cat -i $HOME/code/xwax/import -m 4 -a plughw:Audio4DJ,0,0 -a plughw:Audio4DJ,0,1"


#### Python stuff

function check_build_py(){
    if ! [[ -f "$PWD/build.py" ]] ; then
        echo "No 'build.py' found in current directory"
        return 1
    fi
}

function mkvenv2(){
    if [ -n "${VIRTUAL_ENV}" ] ; then
        echo "You already have a virtualenv active: $VIRTUAL_ENV"
        return 1
    fi
    local venv_name
    venv_name=${1:-.venv2}
    if [ -e $venv_name ] ; then
        echo "$venv_name already exists, aborting."
        return 1
    fi
    echo "Will setup virtualenv in $venv_name"
    virtualenv $venv_name
    source $venv_name/bin/activate
    pip install -U pip
    if check_build_py ; then
        pip install -U --pre pybuilder
        pyb install_dependencies
    fi
}

function mkvenv3(){
    if [ -n "${VIRTUAL_ENV}" ] ; then
        echo "You already have a virtualenv active: $VIRTUAL_ENV"
        return 1
    fi
    local venv_name
    venv_name=${1:-.venv3}
    if [ -e $venv_name ] ; then
        echo "$venv_name already exists, aborting."
        return 1
    fi
    echo "Will setup virtualenv in $venv_name"
    python3 -m venv $venv_name
    source $venv_name/bin/activate
    pip install -U pip
    if check_build_py ; then
        pip install -U --pre pip pybuilder
        pyb install_dependencies
    fi
}

alias venv2="source .venv2/bin/activate"
alias venv3="source .venv3/bin/activate"

setopt clobber
stty stop undef
stty start undef
export PATH=$PATH:$HOME/bin/
alias adb=$HOME/Android/Sdk/platform-tools/adb

gc () {
    LBUFFER="git commit -m \""
    RBUFFER="\""
}
zle -N gc gc
bindkey '^gc' gc

# Add Heroku toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# Add node
export NVM_DIR="/home/ingo/.nvm"
function load_nvm (){
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}

#### Configure prompt
export TERM="xterm-256color"
source "$HOME/code/powerlevel9k/powerlevel9k.zsh-theme"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir virtualenv vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status custom_intelligence time background_jobs)

zsh_python_version () {
    python -c 'import sys; print("py{}.{}".format(sys.version_info[0], sys.version_info[1]))'
}

zsh_intelligence () {
    DICER=$(find_dicer)
    if [[ ! -z $DICER ]]; then
        echo D$DICER;
    elif [[ -n $VIRTUAL_ENV ]]; then
        zsh_python_version;
    else
        echo O
    fi
}

POWERLEVEL9K_CUSTOM_INTELLIGENCE='zsh_intelligence'
