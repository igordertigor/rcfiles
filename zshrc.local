#### Git

gic () {
    LBUFFER="git commit -m \""
    RBUFFER="\""
}
zle -N gic gic
bindkey "git co" gic

gco () {
    LBUFFER="git checkout "
}
zle -N gco gco
bindkey "git ch" gco

git_push_up () {
    LBUFFER="git push --set-upstream origin $(git branch | grep \* | cut -d ' ' -f2)"
}
zle -N git_push_up git_push_up
bindkey "push up" git_push_up

gis () {
    LBUFFER="git status"
}
zle -N gis gis
bindkey "git s" gis

gap () {
    LBUFFER="git add -p"
}
zle -N gap gap
bindkey "git a" gap

#### Python stuff

function mkvenv(){
    if [ -n "${VIRTUAL_ENV}" ] ; then
        echo "You already have a virtualenv active: $VIRTUAL_ENV"
        return 1
    fi

    local pyversion
    if [ "$1" != "" ]
    then
        pyversion=$1
    else
        pyversion=3.11
    fi

    local venv_name
    if [ "$2" != "" ]
    then
        venv_name=$2
    else
        venv_name=${2:-.venv}
    fi

    if [ -e $venv_name ] ; then
        echo "$venv_name already exists, aborting."
        return 1
    fi

    echo "Will setup py{$pyversion} virtualenv in $venv_name"
    python${pyversion} -m venv $venv_name
    source $venv_name/bin/activate
    pip install -U pip

    if [ -e setup.cfg ]; then
        pip install -e .
    elif [ -e pyproject.toml ]; then
        pip install -e .
    elif [ -e requirements.txt ] ; then
        pip install -r requirements.txt
    fi
}

alias venv="source .venv/bin/activate"


setopt clobber
export PATH=$HOME/bin/:$HOME/Library/Python/3.9/bin/:$HOME/.local/bin/:$PATH
alias adb=$HOME/Android/Sdk/platform-tools/adb
export LESS='-g -i -M -R -S -w -z-4'
export VISUAL='vim'
export EDITOR='vim'
export VISUAL='vim'

gc () {
    LBUFFER="git commit -m \""
    RBUFFER="\""
}
zle -N gc gc
bindkey '^gc' gc

# Add node
export NVM_DIR="/home/ingo/.nvm"
function load_nvm (){
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}


#### Configure prompt
# source .powerlevel9k.zsh
#
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
source $HOME/.powerlevel10k.zsh

gks () {
    echo "Applying function: git key sync $1";
    if [[ $HOST == "wertheimer" ]]; then
        DEVICE=/dev/sda1
    else
        DEVICE=/dev/sdb1
    fi
    echo "Using device $DEVICE"
    pmount $DEVICE && git $1 && sleep .5 && pumount $DEVICE
}

export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"
export GIT_TEMPLATE_DIR=$HOME/code/rcfiles/git/

alias swagger-codegen="java -jar $HOME/bin/swagger-codegen-cli.jar"


function ssh_meeting () {
    gmeet_id=$1
    if [[ $2 ]]; then
        case $2; in
            dev)
                project=development-304221
                ;;;
            prod)
                project=production-305009
                ;;;
        esac
    else
        project=development-304221
    fi
    all_machines=$(gcloud compute instances list --project=$project | awk '{print $1}')
    echo $all_machines
    machine_name=$(echo $all_machines | grep meeting-agent-$gmeet_id)
    echo "Now connecting to machine: $machine_name"
    echo "Log locations:"
    echo "Worker: /var/log/worker.err.log"
    echo "Rest: /tmp/verbally_*.log"
    TERM=xterm-256color gcloud compute ssh --tunnel-through-iap verbally@$machine_name --project=$project
}

function git_pull_and_delete () {
    CURRENT_BRANCH=$(git branch --show-current)
    if [[ "$CURRENT_BRANCH" == "master" ]];
    then
        echo "On master, not doing anything";
    else
        echo "Will trash this branch"
        git checkout master
        git pull
        git branch -d "$CURRENT_BRANCH"
    fi
}

if [[ $(hostname) == 'verbally' ]]; then
  source $HOME/.zfunc/_mlem
  source $HOME/.zfunc/_vdb
  source $HOME/.zfunc/_vtool
fi

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

eval "$(pyenv virtualenv-init -)"
