#!/usr/bin/env python3

import os
import glob
import json
import subprocess


def pack_path(name, suffix):
    return os.path.expanduser(os.path.join('~/.vim/pack', name, suffix))


def clone_repo(name, repo_path):
    repo_name = os.path.join(repo_path, name.split('/')[-1])
    if os.path.exists(repo_name):
        subprocess.check_output(
            ['git', 'pull'],
            cwd=repo_name)
    else:
        subprocess.check_output(
            ['git', 'clone', '--depth', '1', github_url(name)],
            cwd=repo_path)
    return repo_name


def github_url(repo_name):
    return 'git@github.com:{}'.format(repo_name)


def link_repo(src, dst):
    name = os.path.basename(src)
    src = os.path.expanduser(src)
    dst = os.path.expanduser(os.path.join(dst, name))
    os.symlink(src, dst, target_is_directory=True)


def mkdirs(path):
    os.makedirs(os.path.expanduser(path), exist_ok=True)
    return os.path.expanduser(path)


def clear_links(*dirs):
    for d in dirs:
        files = (fname
                 for fname in glob.glob(os.path.join(d, '*'))
                 if os.path.islink(fname))
        for fname in files:
            os.remove(fname)


if __name__ == '__main__':
    with open('pkg.json') as f:
        cfg = json.load(f)

    autostart = mkdirs(pack_path(cfg['general']['name'], 'start'))
    optstart = mkdirs(pack_path(cfg['general']['name'], 'opt'))
    repo_path = mkdirs(cfg['general']['repo_path'])

    clear_links(autostart, optstart)

    for repo in cfg['github']:
        print(repo['name'])
        repo_folder = clone_repo(repo['name'], repo_path)
        link_repo(repo_folder, autostart if repo['start'] else optstart)
